/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToken__factory>;
    getContractFactory(
      name: "BEP20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BEP20Token__factory>;
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BEP20__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "IBEP20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20Metadata__factory>;
    getContractFactory(
      name: "Standard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Standard__factory>;
    getContractFactory(
      name: "BEP20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BEP20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IBEP20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IBEP20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "StandardUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardUpgrade__factory>;

    getContractAt(
      name: "BaseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToken>;
    getContractAt(
      name: "BEP20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BEP20Token>;
    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BEP20>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "IBEP20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20Metadata>;
    getContractAt(
      name: "Standard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Standard>;
    getContractAt(
      name: "BEP20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BEP20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IBEP20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20MetadataUpgradeable>;
    getContractAt(
      name: "IBEP20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "StandardUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardUpgrade>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
